#PRIMS
import sys

class Graph():
    def __init__(self, vertices):  # Fixed constructor
        self.V = vertices
        self.graph = [[0 for _ in range(vertices)] for _ in range(vertices)]
    
    def printMST(self, parent, heuristics, total_cost):
        print("\nEdge \tWeight \tHeuristic Value")
        for i in range(1, self.V):
            print(f"{parent[i]} - {i} \t {self.graph[i][parent[i]]} \t {heuristics[i]}")
        print(f"\nTotal MST Cost: {total_cost}")
    
    def minKey(self, key, mstSet):
        min_val = sys.maxsize
        min_index = -1
        for v in range(self.V):
            if key[v] < min_val and not mstSet[v]:
                min_val = key[v]
                min_index = v
        return min_index
    
    def primMST(self, heuristics):
        key = [sys.maxsize] * self.V
        parent = [None] * self.V
        key[0] = 0
        mstSet = [False] * self.V
        parent[0] = -1

        for _ in range(self.V):
            u = self.minKey(key, mstSet)
            mstSet[u] = True

            for v in range(self.V):
                if self.graph[u][v] > 0 and not mstSet[v] and self.graph[u][v] < key[v]:
                    key[v] = self.graph[u][v]
                    parent[v] = u

        total_cost = sum(self.graph[i][parent[i]] for i in range(1, self.V))
        self.printMST(parent, heuristics, total_cost)

# ------------------- Main Program -------------------

if __name__ == '__main__':  # Fixed entry point
    print("Mithilesh Awate TBCO22116")
    print("Heuristic: Estimated cost to reach the goal from the current node.\n")
    
    vertices = int(input("Enter the number of vertices: "))
    g = Graph(vertices)
    
    print("Enter the graph matrix (space-separated rows):")
    for i in range(vertices):
        row = list(map(int, input(f"Row {i}: ").split()))
        g.graph[i] = row
    
    heuristics = []
    print("Enter the heuristic values for each vertex:")
    for i in range(vertices):
        h_value = int(input(f"Heuristic value for vertex {i}: "))
        heuristics.append(h_value)
    
    g.primMST(heuristics)






0p----------------------





Enter the number of vertices: 5
Enter the graph matrix (space-separated rows):
Row 0: 0 2 0 6 0
Row 1: 2 0 3 8 5
Row 2: 0 3 0 0 7
Row 3: 6 8 0 0 9
Row 4: 0 5 7 9 0

Enter the heuristic values for each vertex:
Heuristic value for vertex 0: 3
Heuristic value for vertex 1: 2
Heuristic value for vertex 2: 1
Heuristic value for vertex 3: 4
Heuristic value for vertex 4: 5

