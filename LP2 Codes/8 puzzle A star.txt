import random

def print_board(elements):
    for i in range(9):
        if i % 3 == 0:
            print()
        if elements[i] == -1:
            print("_", end=" ")
        else:
            print(elements[i], end=" ")
    print()

# Check if the puzzle is solvable
def solvable(start):
    inv = 0
    for i in range(9):
        if start[i] == -1:
            continue
        for j in range(i + 1, 9):
            if start[j] == -1:
                continue
            if start[i] > start[j]:
                inv += 1
    return inv % 2 == 0

# Calculate the heuristic (Manhattan distance)
def heuristic(start, goal):
    h = 0
    for i in range(9):
        if start[i] == -1:
            continue
        goal_pos = goal.index(start[i])
        h += abs((goal_pos // 3) - (i // 3)) + abs((goal_pos % 3) - (i % 3))
    return h

# Move the blank tile (represented by -1) in the four possible directions
def move_left(start, position):
    start[position], start[position - 1] = start[position - 1], start[position]

def move_right(start, position):
    start[position], start[position + 1] = start[position + 1], start[position]

def move_up(start, position):
    start[position], start[position - 3] = start[position - 3], start[position]

def move_down(start, position):
    start[position], start[position + 3] = start[position + 3], start[position]

# Generate the next possible states by moving the blank tile
def movetile(start, goal):
    empty_at = start.index(-1)
    row = empty_at // 3
    col = empty_at % 3
    t1, t2, t3, t4 = start[:], start[:], start[:], start[:]
    f1, f2, f3, f4 = 100, 100, 100, 100

    if col - 1 >= 0:
        move_left(t1, empty_at)
        f1 = heuristic(t1, goal)
    if col + 1 < 3:
        move_right(t2, empty_at)
        f2 = heuristic(t2, goal)
    if row + 1 < 3:
        move_down(t3, empty_at)
        f3 = heuristic(t3, goal)
    if row - 1 >= 0:
        move_up(t4, empty_at)
        f4 = heuristic(t4, goal)

    min_heuristic = min(f1, f2, f3, f4)

    if f1 == min_heuristic:
        move_left(start, empty_at)
    elif f2 == min_heuristic:
        move_right(start, empty_at)
    elif f3 == min_heuristic:
        move_down(start, empty_at)
    elif f4 == min_heuristic:
        move_up(start, empty_at)

# Recursive function to solve the puzzle
def solve_eight(start, goal, depth=0):
    if start == goal:
        print("Solved!")
        print_board(start)
        print(f"Solved in {depth} moves.")
        return True

    if depth > 50:  # Safety check to avoid infinite recursion (you can adjust the limit)
        return False

    movetile(start, goal)
    print_board(start)
    return solve_eight(start, goal, depth + 1)

def main():
    start = list()
    goal = list()
    print("Enter the start state (Enter -1 for empty):")
    for i in range(9):
        start.append(int(input()))

    print("Enter the goal state (Enter -1 for empty):")
    for i in range(9):
        goal.append(int(input()))

    print("Start State:")
    print_board(start)

    # Check if solvable
    if solvable(start):
        if not solve_eight(start, goal):
            print("No solution found.")
    else:
        print("Not possible to solve")

if __name__ == '__main__':
    print("Mithilesh Awate TBCO22116")
    main()







0P-------------------



Enter the start state (Enter -1 for empty):
1
2
3
-1
5
6
4
7
8
Enter the goal state (Enter -1 for empty):
1
2
3
4
5
6
7
8
-1

Start State:
1 2 3 
4 5 6 
7 8 _ 

Solved!
1 2 3 
4 5 6 
7 8 _ 
Solved in 5 moves.
